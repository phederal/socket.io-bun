/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { io } from '../src/server';
import type { ClientToServerEvents, ServerToClientEvents } from '../types/socket.types';

// –°–æ–∑–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π namespace
const binaryTestNamespace = io.of<ClientToServerEvents, ServerToClientEvents>('/binary-test');

binaryTestNamespace.on('connection', (socket) => {
	console.log(`üîß Binary test socket ${socket.id} connected`);

	// ===== –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ë–ò–ù–ê–†–ù–û–ì–û –§–û–†–ú–ê–¢–ê =====

	// 1. –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	socket.emit('message', 'This is a regular text message');
	console.log('üì§ Sent regular text message');

	// 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	socket.emitBinary('ping'); // –û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
	socket.emitBinary('message', 'This will be binary if supported');
	console.log('üì§ Sent binary messages');

	// 3. Ultra-fast emit —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	socket.emitUltraFast('notification', 'Fast text message', false); // –¢–µ–∫—Å—Ç–æ–≤—ã–π
	socket.emitUltraFast('notification', 'Fast binary message', true); // –ë–∏–Ω–∞—Ä–Ω—ã–π
	console.log('üì§ Sent ultra-fast messages');

	// 4. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–º–µ—à–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
	socket.emitBatchPooled([
		{ event: 'message', data: 'Regular message' }, // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		{ event: 'ping', binary: true }, // –ë–∏–Ω–∞—Ä–Ω—ã–π
		{ event: 'notification', data: 'Another text message', binary: false }, // –Ø–≤–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
		{ event: 'message', data: 'Binary message', binary: true }, // –ë–∏–Ω–∞—Ä–Ω—ã–π
	]);
	console.log('üì§ Sent batch with mixed formats');

	// ===== –ü–†–ò–ú–ï–†–´ BROADCAST –° –ë–ò–ù–ê–†–ù–´–ú –§–û–†–ú–ê–¢–û–ú =====

	setTimeout(() => {
		// 5. –û–±—ã—á–Ω—ã–π broadcast (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
		binaryTestNamespace.emit('message', 'Regular broadcast message');
		console.log('üì° Sent regular broadcast');

		// 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π broadcast
		binaryTestNamespace.binary.emit('ping'); // –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		binaryTestNamespace.binary.emit('message', 'Binary broadcast message');
		console.log('üì° Sent binary broadcast');

		// 7. –°–º–µ—à–∞–Ω–Ω—ã–π broadcast —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º to/except
		binaryTestNamespace.to('room1').emit('message', 'Text to room1');
		binaryTestNamespace.to('room1').binary.emit('notification', 'Binary to room1');
		console.log('üì° Sent mixed broadcasts to room1');

		// 8. Ultra-fast broadcast —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
		binaryTestNamespace.to('room2').emitUltraFast('ping', undefined, false); // –¢–µ–∫—Å—Ç–æ–≤—ã–π
		binaryTestNamespace.to('room2').emitUltraFast('message', 'Fast binary', true); // –ë–∏–Ω–∞—Ä–Ω—ã–π
		console.log('üì° Sent ultra-fast broadcasts to room2');

		// 9. Bulk operations —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
		binaryTestNamespace.emitBulk([
			{ event: 'message', data: 'Bulk text message' },
			{ event: 'ping', binary: true },
			{ event: 'notification', data: 'Bulk binary message', binary: true },
			{ event: 'message', data: 'Another text', rooms: 'room3' },
		]);
		console.log('üì° Sent bulk operations');
	}, 2000);

	// ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ò–• –°–û–ë–´–¢–ò–ô =====

	socket.on('message', (data) => {
		console.log(`üì® Received message from ${socket.id}:`, data);

		// –û—Ç–≤–µ—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ä—Å–µ—Ä–æ–º)
		socket.emit('message', `Echo: ${data}`);
	});

	socket.on('ping', () => {
		console.log(`üì° Received ping from ${socket.id}`);

		// –ú–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		socket.emitBinary('pong');
	});

	socket.on('request_binary_test', () => {
		console.log(`üß™ Binary test requested by ${socket.id}`);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		socket.emit('test_result', 'Text format');
		socket.emitBinary('test_result', 'Binary format');
		socket.emitUltraFast('test_result', 'Ultra-fast text', false);
		socket.emitUltraFast('test_result', 'Ultra-fast binary', true);
	});

	// ===== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ö–û–ú–ù–ê–¢–ê–ú –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====

	socket.join(['room1', 'room2', 'room3']);
	console.log(`üè† Socket ${socket.id} joined test rooms`);

	// ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====

	socket.on('disconnect', (reason) => {
		console.log(`üîß Binary test socket ${socket.id} disconnected: ${reason}`);
	});
});

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====

export function testBinaryProtocol() {
	console.log('\nüß™ Testing binary protocol capabilities...');

	const sockets = Array.from(binaryTestNamespace.sockets.values());
	if (sockets.length === 0) {
		console.log('‚ùå No sockets connected to binary test namespace');
		return;
	}

	console.log(`üìä Testing with ${sockets.length} connected sockets`);

	// –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
	binaryTestNamespace.emit('message', 'Test: Regular broadcast');
	binaryTestNamespace.binary.emit('message', 'Test: Binary broadcast');

	sockets.forEach((socket, index) => {
		console.log(`üîß Testing socket ${index + 1}/${sockets.length}: ${socket.id}`);

		socket.emit('test_message', `Regular message ${index}`);
		socket.emitBinary('test_message', `Binary message ${index}`);
		socket.emitUltraFast('test_notification', `Fast text ${index}`, false);
		socket.emitUltraFast('test_notification', `Fast binary ${index}`, true);
	});

	console.log('‚úÖ Binary protocol test completed');
}

export function benchmarkBinaryVsText(iterations: number = 1000) {
	console.log(`\n‚ö° Benchmarking binary vs text performance (${iterations} iterations)...`);

	const sockets = Array.from(binaryTestNamespace.sockets.values());
	if (sockets.length === 0) {
		console.log('‚ùå No sockets for benchmark');
		return;
	}

	const socket = sockets[0];
	const testData = 'Benchmark test message';

	// Benchmark —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	console.time('Text Format');
	for (let i = 0; i < iterations; i++) {
		socket.emit('benchmark', testData);
	}
	console.timeEnd('Text Format');

	// Benchmark –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
	console.time('Binary Format');
	for (let i = 0; i < iterations; i++) {
		socket.emitBinary('benchmark', testData);
	}
	console.timeEnd('Binary Format');

	// Benchmark ultra-fast —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ
	console.time('Ultra-fast Text');
	for (let i = 0; i < iterations; i++) {
		socket.emitUltraFast('benchmark', testData, false);
	}
	console.timeEnd('Ultra-fast Text');

	// Benchmark ultra-fast –±–∏–Ω–∞—Ä–Ω–æ–≥–æ
	console.time('Ultra-fast Binary');
	for (let i = 0; i < iterations; i++) {
		socket.emitUltraFast('benchmark', testData, true);
	}
	console.timeEnd('Ultra-fast Binary');

	console.log('üìä Benchmark completed');
}

// ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–∫–µ—Ç—ã
setInterval(() => {
	if (binaryTestNamespace.socketsCount > 0) {
		testBinaryProtocol();
	}
}, 30000);

console.log('üîß Binary test namespace initialized');
console.log('üìù Available functions:');
console.log('  - testBinaryProtocol() - Test binary protocol capabilities');
console.log('  - benchmarkBinaryVsText(iterations) - Benchmark performance');
console.log('üí° Connect to /binary-test namespace to test binary features');
