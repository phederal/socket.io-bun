/**
 * Server & WebSocket
 * Main file of backend with full TypeScript support
 */

import { Hono } from 'hono';
import { websocket, wsUpgrade, io } from './ws';
import type {
	ClientToServerEvents,
	ServerToClientEvents,
	SocketData,
} from './shared/types/socket.types';
import { serveStatic } from 'hono/bun';

const isProduction = process.env.NODE_ENV === 'production';

// App
const app = new Hono<{
	Variables: {
		user: unknown;
		session: unknown;
	};
}>();

// Add middleware to set mock user and session for testing
app.use('/ws/*', async (c, next) => {
	// In production, this would come from your authentication middleware
	c.set('user', { id: `user_${Date.now()}` });
	c.set('session', { id: `session_${Date.now()}` });

	await next();
});

app.get('/', serveStatic({ path: 'test/test-client.html' }));
app.get('/ws', wsUpgrade);
app.get('/ws/*', wsUpgrade);

// Create server first
export const server = Bun.serve({
	hostname: 'localhost', // isProduction ? '0.0.0.0' : 'localhost',
	port: 8443, // isProduction ? Number(process.env.APP_PORT) || 3000 : 8443,
	fetch: app.fetch,
	development: !isProduction,
	maxRequestBodySize: 128 * 1024 * 1024,
	idleTimeout: 120,

	websocket: {
		open: websocket.open,
		message: websocket.message,
		close: websocket.close,
		idleTimeout: 120,
		maxPayloadLength: 16 * 1024 * 1024,
		publishToSelf: false,
	},

	tls: {
		key: Bun.file(import.meta.dir + '/dev/localhost-key.pem'),
		cert: Bun.file(import.meta.dir + '/dev/localhost.pem'),
	},
});

// Set Bun server instance for Socket.IO publishing BEFORE setting up events
io.setBunServer(server);

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
import './test/test-server';
import { warmupPerformanceOptimizations } from './socket/socket';
warmupPerformanceOptimizations();

/**
 * Single Performance Test Run
 */
import {
	runQuickPerformanceTest,
	saveResultsToFile,
	performanceTest,
} from './test/performance_test';

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è performance —Ç–µ—Å—Ç–∞–º–∏
 */
let performanceTestState = {
	completed: false,
	running: false,
	targetSocket: null as string | null,
	timeoutId: null as NodeJS.Timeout | null,
};

io.on('connection', (socket) => {
	console.log(`üéâ Socket ${socket.id} connected`);

	// –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
	if (performanceTestState.completed) {
		console.log('üìä Performance test already completed. Skipping for this connection.');
		return;
	}

	// –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	if (performanceTestState.running) {
		console.log(
			`‚è≥ Performance test is running with socket: ${performanceTestState.targetSocket}`
		);
		return;
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–æ–∫–µ—Ç–æ–º
	startPerformanceTest(socket.id);
});

async function startPerformanceTest(socketId: string) {
	performanceTestState.running = true;
	performanceTestState.targetSocket = socketId;

	// –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –µ—Å–ª–∏ –µ—Å—Ç—å
	if (performanceTestState.timeoutId) {
		clearTimeout(performanceTestState.timeoutId);
	}

	performanceTestState.timeoutId = setTimeout(async () => {
		try {
			console.log(`\nüöÄ Starting performance test with socket: ${socketId}...`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∫–µ—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			const namespace = io.of('/');
			const testSocket = namespace.sockets.get(socketId);

			if (!testSocket || !testSocket.connected) {
				console.warn(
					`‚ö†Ô∏è Target socket ${socketId} disconnected, searching for alternatives...`
				);

				// –ò—â–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç
				const activeSockets = Array.from(namespace.sockets.entries()).filter(
					([id, socket]) => socket.connected && socket.ws?.readyState === 1
				);

				if (activeSockets.length === 0) {
					console.error(`‚ùå No active sockets available for testing`);
					resetPerformanceTestState();
					return;
				}

				const [newSocketId] = activeSockets[0];
				console.log(`üîÑ Using alternative socket: ${newSocketId}`);
				performanceTestState.targetSocket = newSocketId;
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IO instance
			performanceTest.setIOInstance(io);

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å retry –ª–æ–≥–∏–∫–æ–π
			let attempts = 0;
			const maxAttempts = 3;

			while (attempts < maxAttempts) {
				try {
					await performanceTest.runOptimizedQuickTests(performanceTestState.targetSocket);
					break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏
				} catch (error) {
					attempts++;
					console.error(`‚ùå Performance test attempt ${attempts} failed:`, error);

					if (attempts < maxAttempts) {
						console.log(
							`üîÑ Retrying in 2 seconds... (attempt ${attempts + 1}/${maxAttempts})`
						);
						await new Promise((resolve) => setTimeout(resolve, 2000));

						// –ò—â–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç –¥–ª—è retry
						const namespace = io.of('/');
						const activeSockets = Array.from(namespace.sockets.entries()).filter(
							([id, socket]) => socket.connected && socket.ws?.readyState === 1
						);

						if (activeSockets.length > 0) {
							performanceTestState.targetSocket = activeSockets[0][0];
							console.log(
								`üîÑ Retry with socket: ${performanceTestState.targetSocket}`
							);
						} else {
							console.error(`‚ùå No active sockets for retry`);
							break;
						}
					}
				}
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
			const filename = `final-performance-${performanceTestState.targetSocket?.slice(
				-8
			)}-${Date.now()}.json`;
			saveResultsToFile(filename);
			console.log(`\n‚úÖ Performance test completed! Results saved to ${filename}`);

			performanceTestState.completed = true;
			console.log('üìä No more tests will run for new connections.');
		} catch (error) {
			console.error('‚ùå Fatal performance test error:', error);
		} finally {
			resetPerformanceTestState();
		}
	}, 3000);
}

function resetPerformanceTestState() {
	performanceTestState.running = false;
	performanceTestState.targetSocket = null;
	if (performanceTestState.timeoutId) {
		clearTimeout(performanceTestState.timeoutId);
		performanceTestState.timeoutId = null;
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–æ–≤
io.on('disconnect', (socket, reason) => {
	console.log(`‚ùå Socket ${socket.id} disconnected: ${reason}`);

	// –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Å–æ–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	if (performanceTestState.targetSocket === socket.id && performanceTestState.running) {
		console.warn(`‚ö†Ô∏è Performance test socket disconnected, will try to find alternative...`);
		// –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ–º —Ç–µ—Å—Ç—É –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç
	}
});

// // –í index.ts –¥–æ–±–∞–≤—å—Ç–µ:
// import { runQuickPerformanceTest, saveResultsToFile } from './test/performance_test';
// io.on('connection', (socket) => {
// 	console.log(`üéâ Socket ${socket.id} connected`);
// 	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// 	setTimeout(async () => {
// 		try {
// 			await runQuickPerformanceTest(io, socket.id);
// 			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
// 			saveResultsToFile(`performance-${socket.id}-${Date.now()}.json`);
// 		} catch (error) {
// 			console.error('‚ùå Performance test failed:', error);
// 		}
// 	}, 3000);
// });

// /**
//  * Perfomance test 2
//  */
// import { performanceTest, saveResultsToFile } from './test/performance_test';

// io.on('connection', (socket) => {
//     console.log(`üéâ Socket ${socket.id} connected`);

//     setTimeout(async () => {
//         try {
//             // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –≤—ã–≤–æ–¥–∞
//             performanceTest.setIOInstance(io);

//             // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã
//             await performanceTest.testSimpleEmit(socket.id, 10000);
//             await performanceTest.testBinaryEmit(socket.id, 10000);
//             await performanceTest.testUltraFastEmit(socket.id, 10000);

//             // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//             const filename = `benchmark-${socket.id.slice(-8)}-${Date.now()}.json`;
//             saveResultsToFile(filename);

//             console.log(`üìä Performance test completed, results saved to ${filename}`);

//         } catch (error) {
//             console.error('‚ùå Performance test failed:', error);
//         }
//     }, 3000);
// });

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–æ–π
// if (!isProduction) {
// 	console.log('[INDEX] Registering connection handler...');
// }
// io.on('connection', (socket) => {
// 	if (!isProduction) {
// 		console.log(`üéâ [INDEX] Socket ${socket.id} connected successfully!`);
// 		console.log(`üìä [INDEX] Total sockets: ${io.socketsCount}`);
// 	}

// 	// ‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
// 	socket.on('ping', () => {
// 		if (!isProduction) {
// 			console.log(`üì° [INDEX] PING received from ${socket.id}`);
// 		}
// 		socket.emit('pong');
// 		if (!isProduction) {
// 			console.log(`üì° [INDEX] PONG sent to ${socket.id}`);
// 		}
// 	});

// 	socket.on('message', (data) => {
// 		if (!isProduction) {
// 			console.log(`üì® [INDEX] MESSAGE received from ${socket.id}:`, data);
// 		}
// 		// –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ACK –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
// 		socket.emit('message', `Echo: ${data}`);
// 		socket.broadcast.emit('message', `${socket.id} says: ${data}`);
// 	});

// 	socket.on('disconnect', (reason) => {
// 		if (!isProduction) {
// 			console.log(`‚ùå [INDEX] Socket ${socket.id} disconnected: ${reason}`);
// 			console.log(`üìä [INDEX] Remaining sockets: ${io.socketsCount}`);
// 		}
// 	});

// 	// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
// 	setTimeout(() => {
// 		if (!isProduction) {
// 			console.log(`üí¨ [INDEX] Sending welcome message to ${socket.id}`);
// 		}
// 		try {
// 			const success = socket.emit('message', `Welcome ${socket.id}! Server is ready.`);
// 			if (!isProduction) {
// 				console.log(`üí¨ [INDEX] Welcome message sent: ${success}`);
// 			}
// 		} catch (error) {
// 			if (!isProduction) {
// 				console.error(`üí¨ [INDEX] Error sending welcome message:`, error);
// 			}
// 		}
// 	}, 2000);

// 	// ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º broadcast
// 	setTimeout(() => {
// 		if (!isProduction) {
// 			console.log(`üì¢ [INDEX] Broadcasting notification...`);
// 		}
// 		try {
// 			io.emit('message', `New user ${socket.id} joined! Total: ${io.socketsCount}`);
// 		} catch (error) {
// 			if (!isProduction) {
// 				console.error(`üì¢ [INDEX] Error broadcasting:`, error);
// 			}
// 		}
// 	}, 3000);
// });

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
if (!isProduction) {
	io.on('connect', (socket) => {
		console.log(`üîó [INDEX] Connect event received for ${socket.id}`);
	});
	console.log(`üöÄ Server listening on https://${server.hostname}:${server.port}`);
	console.log(`üì° WebSocket endpoint: wss://${server.hostname}:${server.port}/ws`);
	console.log(`üí¨ Chat namespace: wss://${server.hostname}:${server.port}/ws/chat`);
	console.log();
}

// ‚úÖ Export typed instances
export type App = typeof app;
export { io };
export type TypedSocket = Parameters<Parameters<typeof io.on>[1]>[0];
