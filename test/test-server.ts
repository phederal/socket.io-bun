/**
 * Server ACK Test Example
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã acknowledgments –≤ Socket.IO
 */

import { io } from '../socket/server';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface TestClientEvents {
	// –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ ACK
	message: (data: string) => void;
	ping: () => void;

	// –°–æ–±—ã—Ç–∏—è —Å ACK –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
	echo: (data: string, callback: (response: string) => void) => void;
	get_user_info: (
		callback: (info: { id: string; name: string; timestamp: string }) => void
	) => void;
	calculate: (
		data: { operation: string; a: number; b: number },
		callback: (result: { result?: number; error?: string }) => void
	) => void;
	trigger_error: (callback: (error: { error: string; code: number }) => void) => void;
	slow_response: (callback: (response: string) => void) => void;

	// –ó–∞–ø—Ä–æ—Å—ã server-to-client ACK
	request_ping_back: () => void;
	request_validation: (data: any) => void;
}

interface TestServerEvents {
	// –ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
	message: (data: string) => void;
	pong: () => void;

	// –°–æ–±—ã—Ç–∏—è —Å ACK –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
	server_ping: (callback: (response: string) => void) => void;
	validate_data: (
		data: any,
		callback: (result: { valid: boolean; message: string }) => void
	) => void;
	request_feedback: (data: string, callback: (feedback: string) => void) => void;
}

// –°–æ–∑–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π namespace –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const testNamespace = io.of<TestClientEvents, TestServerEvents>('/');

testNamespace.on('connection', (socket) => {
	if (process.env.NODE_ENV === 'development') {
		console.log(`üß™ Test socket ${socket.id} connected`);
	}

	// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ë–ï–ó ACK =====

	socket.on('message', (data) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üì® Message from ${socket.id}:`, data);
		}
		socket.emit('message', `Server echo: ${data}`);
		socket.broadcast.emit('message', `${socket.id} says: ${data}`);
	});

	socket.on('ping', () => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üì° Ping from ${socket.id}`);
		}
		socket.emit('pong');
	});

	// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –° ACK (CLIENT-TO-SERVER) =====

	// –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ —Å ACK
	socket.on('echo', (data, callback) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üîÑ Echo request from ${socket.id}:`, data);
		}

		// –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
		setTimeout(() => {
			callback(`Echo: ${data} (from ${socket.id})`);
		}, 100);
	});

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	socket.on('get_user_info', (callback) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üë§ User info request from ${socket.id}`);
		}

		const userInfo = {
			id: socket.id,
			name: `User_${socket.id.slice(-8)}`,
			timestamp: new Date().toISOString(),
		};

		callback(userInfo);
	});

	// –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
	socket.on('calculate', (data, callback) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üßÆ Calculation request from ${socket.id}:`, data);
		}

		const { operation, a, b } = data;

		if (typeof a !== 'number' || typeof b !== 'number') {
			return callback({ error: 'Invalid numbers provided' });
		}

		let result: number;
		switch (operation) {
			case 'add':
				result = a + b;
				break;
			case 'subtract':
				result = a - b;
				break;
			case 'multiply':
				result = a * b;
				break;
			case 'divide':
				if (b === 0) {
					return callback({ error: 'Division by zero' });
				}
				result = a / b;
				break;
			default:
				return callback({ error: 'Unknown operation' });
		}

		callback({ result });
	});

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	socket.on('trigger_error', (callback) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`‚ùå Error trigger from ${socket.id}`);
		}
		callback({
			error: 'This is a test error',
			code: 400,
		});
	});

	// –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è timeout
	socket.on('slow_response', (callback) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`‚è∞ Slow response request from ${socket.id}`);
		}

		// –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–±–æ–ª—å—à–µ —á–µ–º timeout –≤ –∫–ª–∏–µ–Ω—Ç–µ)
		setTimeout(() => {
			callback('This response took 10 seconds');
		}, 10000);
	});

	// ===== SERVER-TO-CLIENT ACK –¢–ï–°–¢–´ =====

	// –ó–∞–ø—Ä–æ—Å ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	socket.on('request_ping_back', () => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üì° Ping back request from ${socket.id}`);
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–ª–∏–µ–Ω—Ç—É –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç
		socket.emit('server_ping', (response) => {
			if (process.env.NODE_ENV === 'development') {
				console.log(`üì° Ping response from ${socket.id}:`, response);
			}
		});
	});

	// –ó–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
	socket.on('request_validation', (data) => {
		if (process.env.NODE_ENV === 'development') {
			console.log(`üîç Validation request from ${socket.id}:`, data);
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
		socket.emit('validate_data', data, (result) => {
			if (process.env.NODE_ENV === 'development') {
				console.log(`üîç Validation result from ${socket.id}:`, result);
			}
		});
	});

	// ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ =====

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	setTimeout(() => {
		socket.emit('message', 'üéâ Welcome to Socket.IO ACK Test Server!');
	}, 1000);

	// // –¢–µ—Å—Ç–∏—Ä—É–µ–º server-to-client ACK —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
	// setTimeout(() => {
	// 	console.log(`üß™ Testing server-to-client ACK with ${socket.id}`);

	// 	socket.timeout(5000).emit('server_ping', (err, response) => {
	// 		if (err) {
	// 			console.log(`‚è∞ Auto-test ACK timeout from ${socket.id}:`, err.message);
	// 		} else {
	// 			console.log(`‚úÖ Auto-test ACK response from ${socket.id}:`, response);
	// 		}
	// 	});
	// }, 3000);

	// // –¢–µ—Å—Ç–∏—Ä—É–µ–º timeout ACK —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
	// setTimeout(() => {
	// 	console.log(`‚è∞ Testing timeout ACK with ${socket.id}`);

	// 	socket.timeout(2000).emit('request_feedback', 'How is the connection?', (err, feedback) => {
	// 		if (err) {
	// 			console.log(`‚è∞ Timeout test result for ${socket.id}:`, err.message);
	// 		} else {
	// 			console.log(`‚úÖ Feedback from ${socket.id}:`, feedback);
	// 		}
	// 	});
	// }, 5000);

	// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====

	socket.on('disconnect', (reason) => {
		console.log(`üß™ Test socket ${socket.id} disconnected: ${reason}`);
	});
});

// ===== BROADCAST ACK –¢–ï–°–¢–´ =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è broadcast ACK
export function testBroadcastAck() {
	if (process.env.NODE_ENV === 'development') {
		console.log('\nüß™ Testing broadcast acknowledgments...');
	}

	const sockets = Array.from(testNamespace.sockets.values());
	if (sockets.length === 0) {
		if (process.env.NODE_ENV === 'development') {
			console.log('‚ùå No sockets connected for broadcast test');
		}
		return;
	}

	if (process.env.NODE_ENV === 'development') {
		console.log(`üì° Broadcasting ping to ${sockets.length} sockets`);
	}

	// Broadcast ACK test
	testNamespace.emit('server_ping', (err, responses) => {
		if (err) {
			console.error('‚ùå Broadcast ACK error:', err.message);
		} else {
			if (process.env.NODE_ENV === 'development') {
				console.log(`‚úÖ Broadcast ACK: received ${responses.length} responses`);
			}
			if (process.env.NODE_ENV === 'development') {
				responses.forEach((response, index) => {
					console.log(`  Response ${index + 1}:`, response);
				});
			}
		}
	});

	// Timeout broadcast test
	testNamespace.timeout(3000).emit('validate_data', { test: 'broadcast' }, (err, responses) => {
		if (err) {
			console.error(`‚è∞ Broadcast timeout: ${err.message}`);
		} else {
			if (process.env.NODE_ENV === 'development') {
				console.log(
					`‚úÖ Broadcast validation: ${responses.length} responses within timeout`
				);
			}
		}
	});
}

// ===== STRESS TEST =====

export function stressTestAck(socketId: string, count: number = 100) {
	const socket = testNamespace.sockets.get(socketId);
	if (!socket) {
		if (process.env.NODE_ENV === 'development') {
			console.log(`‚ùå Socket ${socketId} not found`);
		}
		return;
	}

	console.log(`üí™ Starting stress test: ${count} ACK requests to ${socketId}`);
	const startTime = Date.now();
	let completed = 0;
	let errors = 0;

	for (let i = 0; i < count; i++) {
		socket.emit('server_ping', (response) => {
			completed++;
			if (!response || response.includes('error')) {
				errors++;
			}

			if (completed === count) {
				const duration = Date.now() - startTime;
				console.log(
					`üí™ Stress test completed: ${completed}/${count} in ${duration}ms, ${errors} errors`
				);
			}
		});
	}
}

// ===== –£–¢–ò–õ–ò–¢–´ =====

export function getConnectedSockets() {
	return Array.from(testNamespace.sockets.keys());
}

export function sendTestMessage(socketId: string, message: string) {
	const socket = testNamespace.sockets.get(socketId);
	if (socket) {
		socket.emit('message', `Test: ${message}`);
		return true;
	}
	return false;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ broadcast —Ç–µ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
// setInterval(() => {
// 	if (testNamespace.sockets.size > 0) {
// 		testBroadcastAck();
// 	}
// }, 30000);
